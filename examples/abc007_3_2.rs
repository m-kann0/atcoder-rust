use std::io::Read;
use std::collections::VecDeque;

fn main() {
    let mut buf = String::new();
    std::io::stdin().read_to_string(&mut buf).unwrap();

    let answer = solve(&buf);

    println!("{}", answer);
}

fn solve(input: &str) -> String {
    let mut iterator = input.split_whitespace();

    let h: usize = iterator.next().unwrap().parse().unwrap();
    let w: usize = iterator.next().unwrap().parse().unwrap();
    let sx: usize = iterator.next().unwrap().parse().unwrap();
    let sy: usize = iterator.next().unwrap().parse().unwrap();
    let gx: usize = iterator.next().unwrap().parse().unwrap();
    let gy: usize = iterator.next().unwrap().parse().unwrap();
    let sx = sx - 1;
    let sy = sy - 1;
    let gx = gx - 1;
    let gy = gy - 1;

    let mut map: Vec<Vec<char>> = Vec::new();
    for _ in 0..h {
        let line: Vec<char> = iterator.next().unwrap().chars().collect();
        map.push(line);
    }

    let dx = vec![-1, 1, 0, 0];
    let dy = vec![0, 0, -1, 1];

    const INF: usize = 100_000;

    let mut q: VecDeque<(usize, usize)> = VecDeque::new();
    let mut d: Vec<Vec<usize>> = vec![vec![INF; w]; h];

    q.push_back((sx, sy));
    d[sx][sy] = 0;

    while let Some((cx, cy)) = q.pop_front() {
        if cx == gx && cy == gy {
            break;
        }

        for i in 0..4 {
            let nx = (cx as isize + dx[i]) as usize;
            let ny = (cy as isize + dy[i]) as usize;
            if map[nx][ny] != '#' && d[nx][ny] == INF {
                q.push_back((nx, ny));
                d[nx][ny] = d[cx][cy] + 1;
            }
        }
    }

    d[gx][gy].to_string()
}

#[test]
fn test() {
    let cases: Vec<(&str, &str)> = vec![
        (
            r"7 8
2 2
4 5
########
#......#
#.######
#..#...#
#..##..#
##.....#
########
",
            "11"
        ),
        (
            r"5 8
2 2
2 4
########
#.#....#
#.###..#
#......#
########
",
            "10"
        ),
        (
            r"50 50
2 2
49 49
##################################################
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
##################################################
",
            "94"
        ),
    ];

    let mut all_ok = true;
    for (i, case) in cases.iter().enumerate() {
        print!("case {} : ", i);

        let expected = case.1;
        let actual = solve(case.0);

        if expected == actual {
            println!("OK");
        } else {
            println!("NG");
            println!("    Expected: {}", expected);
            println!("    Actual  : {}", actual);

            all_ok = false;
        }
    }

    assert_eq!(all_ok, true);
}