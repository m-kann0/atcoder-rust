use std::io::Read;

fn main() {
    let mut buf = String::new();
    std::io::stdin().read_to_string(&mut buf).unwrap();

    let answer = solve(&buf);

    println!("{}", answer);
}

fn solve(input: &str) -> String {
    let mut iterator = input.split_whitespace();

    let n: usize = iterator.next().unwrap().parse().unwrap();
    let s: Vec<char> = iterator.next().unwrap().chars().collect();

    if n <= 3 {
        return "0".to_string();
    }

    let mut r: Vec<usize> = vec![0; n + 1];
    let mut g: Vec<usize> = vec![0; n + 1];
    let mut b: Vec<usize> = vec![0; n + 1];
    for i in (0..n).rev() {
        if s[i] == 'R' {
            r[i] = r[i + 1] + 1;
            g[i] = g[i + 1];
            b[i] = b[i + 1];
        } else if s[i] == 'G' {
            r[i] = r[i + 1];
            g[i] = g[i + 1] + 1;
            b[i] = b[i + 1];
        } else {
            r[i] = r[i + 1];
            g[i] = g[i + 1];
            b[i] = b[i + 1] + 1;
        }
    }

    let mut ans = 0;

    for i in 0..(n - 2) {
        for j in (i + 1)..(n - 1) {
            let ci = s[i];
            let cj = s[j];
            let ng_index = j + (j - i);
            if ci == 'R' && cj == 'G' || ci == 'G' && cj == 'R' {
                ans += b[j + 1];
                if ng_index < n && s[ng_index] == 'B' {
                    ans -= 1;
                }
            } else if ci == 'G' && cj == 'B' || ci == 'B' && cj == 'G' {
                ans += r[j + 1];
                if ng_index < n && s[ng_index] == 'R' {
                    ans -= 1;
                }
            } else if ci == 'R' && cj == 'B' || ci == 'B' && cj == 'R' {
                ans += g[j + 1];
                if ng_index < n && s[ng_index] == 'G' {
                    ans -= 1;
                }
            }
        }
    }

    return ans.to_string();
}

#[test]
fn test() {
    let cases: Vec<(&str, &str)> = vec![
        (
            r"4
RRGB",
            "1"
        ),
        (
            r"39
RBRBGRBGGBBRRGBBRRRBGGBRBGBRBGBRBBBGBBB",
            "1800"
        ),
        (
            r"4000

            r"123",
        ),
    ];

    let mut all_ok = true;
    for (i, case) in cases.iter().enumerate() {
        print!("case {} : ", i);

        let expected = case.1;
        let actual = solve(case.0);

        if expected == actual {
            println!("OK");
        } else {
            println!("NG");
            println!("    Expected: {}", expected);
            println!("    Actual  : {}", actual);

            all_ok = false;
        }
    }

    assert_eq!(all_ok, true);
}