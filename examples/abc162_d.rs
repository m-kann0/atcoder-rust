use std::io::Read;

fn main() {
    let mut buf = String::new();
    std::io::stdin().read_to_string(&mut buf).unwrap();

    let answer = solve(&buf);

    println!("{}", answer);
}

fn solve(input: &str) -> String {
    let mut iterator = input.split_whitespace();

    let n: usize = iterator.next().unwrap().parse().unwrap();
    let s: Vec<char> = iterator.next().unwrap().chars().collect();

    if n <= 3 {
        return "0".to_string();
    }

    let mut count_r = 0;
    let mut count_g = 0;
    let mut count_b = 0;
    for &c in &s {
        if c == 'R' {
            count_r += 1;
        } else if c == 'G' {
            count_g += 1;
        } else {
            count_b += 1;
        }
    }

    let mut ans: usize = count_r * count_g * count_b;
    for i in 0..(n - 2) {
        for j in (i + 1)..(n - 1) {
            let k = j + (j - i);
            if k >= n {
                break;
            }
            if s[i] != s[j] && s[j] != s[k] && s[k] != s[i] {
                ans -= 1;
            }
        }
    }
    return ans.to_string();
}

#[test]
fn test() {
    let cases: Vec<(&str, &str)> = vec![
        (
            r"4
RRGB",
            "1"
        ),
        (
            r"39
RBRBGRBGGBBRRGBBRRRBGGBRBGBRBGBRBBBGBBB",
            "1800"
        ),
        (
            r"4000

            r"123",
        ),
    ];

    let mut all_ok = true;
    for (i, case) in cases.iter().enumerate() {
        print!("case {} : ", i);

        let expected = case.1;
        let actual = solve(case.0);

        if expected == actual {
            println!("OK");
        } else {
            println!("NG");
            println!("    Expected: {}", expected);
            println!("    Actual  : {}", actual);

            all_ok = false;
        }
    }

    assert_eq!(all_ok, true);
}