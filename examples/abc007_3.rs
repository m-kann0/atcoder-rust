use std::io::Read;
use std::collections::VecDeque;

fn main() {
    let mut buf = String::new();
    std::io::stdin().read_to_string(&mut buf).unwrap();

    let answer = solve(&buf);

    println!("{}", answer);
}

fn solve(input: &str) -> String {
    let mut iterator = input.split_whitespace();

    let r: usize = iterator.next().unwrap().parse().unwrap();
    let c: usize = iterator.next().unwrap().parse().unwrap();
    let sy: usize = iterator.next().unwrap().parse().unwrap();
    let sx: usize = iterator.next().unwrap().parse().unwrap();
    let gy: usize = iterator.next().unwrap().parse().unwrap();
    let gx: usize = iterator.next().unwrap().parse().unwrap();
    let mut map: Vec<Vec<char>> = Vec::new();
    for _ in 0..r {
        map.push(iterator.next().unwrap().chars().collect());
    }

    let dy: Vec<isize> = vec![-1, 1, 0, 0];
    let dx: Vec<isize> = vec![0, 0, -1, 1];

    const INF: usize = 5000;
    let mut d: Vec<Vec<usize>> = vec![vec![INF; c]; r];
    let mut q: VecDeque<(usize, usize)> = VecDeque::new();
    d[sy - 1][sx - 1] = 0;
    q.push_back((sy - 1, sx - 1));
    while !q.is_empty() {
        let current = q.pop_front().unwrap();
        let cy = current.0;
        let cx = current.1;

        for direction in 0..4 {
            let ny = cy as isize + dy[direction];
            let nx = cx as isize + dx[direction];
            if ny < 0 || nx < 0 || ny >= r as isize || nx >= c as isize {
                continue;
            }
            let ny = ny as usize;
            let nx = nx as usize;
            if map[ny][nx] == '#' || d[ny][nx] != INF {
                continue;
            }
            d[ny][nx] = d[cy][cx] + 1;
            q.push_back((ny, nx));
        }
    }

    return format!("{}", d[gy - 1][gx - 1]);
}

#[test]
fn test() {
    let cases: Vec<(&str, &str)> = vec![
        (
            r"7 8
2 2
4 5
########
#......#
#.######
#..#...#
#..##..#
##.....#
########",
            r"11"
        ),
        (
            r"5 8
2 2
2 4
########
#.#....#
#.###..#
#......#
########",
            r"10"
        ),
        (
            r"50 50
2 2
49 49
##################################################
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
##################################################",
            r"94"
        ),
    ];

    let mut all_ok = true;
    for (i, case) in cases.iter().enumerate() {
        print!("case {} : ", i);

        let expected = case.1;
        let actual = solve(case.0);

        if expected == actual {
            println!("OK");
        } else {
            println!("NG");
            println!("    Expected: {}", expected);
            println!("    Actual  : {}", actual);

            all_ok = false;
        }
    }

    assert_eq!(all_ok, true);
}