#![allow(non_snake_case)]

use std::io::Read;

fn main() {
    let mut buf = String::new();
    std::io::stdin().read_to_string(&mut buf).unwrap();

    let answer = solve(&buf);

    println!("{}", answer);
}

const INF: usize = 1_000_000_000_000_000;

fn solve(input: &str) -> String {
    let mut iterator = input.split_whitespace();

    let n: usize = iterator.next().unwrap().parse().unwrap();
    let m: usize = iterator.next().unwrap().parse().unwrap();
    let mut d = vec![vec![INF; n]; n];
    let mut t = vec![vec![0; n]; n];
    for _ in 0..m {
        let u: usize = iterator.next().unwrap().parse().unwrap();
        let v: usize = iterator.next().unwrap().parse().unwrap();
        let di: usize = iterator.next().unwrap().parse().unwrap();
        let ti: usize = iterator.next().unwrap().parse().unwrap();
        let u = u - 1;
        let v = v - 1;
        d[u][v] = di;
        d[v][u] = di;
        t[u][v] = ti;
        t[v][u] = ti;
    }

    if n == 1 {
        return "0 1".to_string();
    }

    let mut dp = vec![vec![INF; n]; 1 << n];
    let mut dp2 = vec![vec![0_usize; n]; 1 << n];
    dp[0][0] = 0;
    dp2[0][0] = 1;
    for S in 0usize..(1 << n) {
        // eprintln!("S = {:05b}", S);
        for u in 0..n {
            for v in 0..n {
                if S >> v & 1 > 0 {
                    continue;
                }
                if dp[S][u] + d[u][v] <= t[u][v] {
                    if dp[S | 1 << v][v] > dp[S][u] + d[u][v] {
                        dp[S | 1 << v][v] = dp[S][u] + d[u][v];
                        dp2[S | 1 << v][v] = dp2[S][u];
                    } else if dp[S | 1 << v][v] == dp[S][u] + d[u][v] {
                        dp2[S | 1 << v][v] += dp2[S][u];
                    }
                }
            }
        }
    }
    let dist = dp[(1 << n) - 1][0];
    if dist >= INF {
        return "IMPOSSIBLE".to_string();
    }
    format!("{} {}", dist, dp2[(1 << n) - 1][0])
}

fn debug(dp: &Vec<Vec<usize>>) {
    eprintln!();
    for i in 0..dp.len() {
        eprint!("{:05b}", i);
        for j in 0..dp[i].len() {
            if dp[i][j] >= INF {
                eprint!("    I ")
            } else {
                eprint!("{:5} ", dp[i][j])
            }
        }
        eprintln!();
    }
}

#[test]
fn test() {
    let cases: Vec<(&str, &str)> = vec![
        (
            r"3 3
1 2 1 6
2 3 2 6
3 1 3 6",
            "6 2"
        ),
        (
            r"3 3
1 2 1 1
2 3 1 3
3 1 1 3",
            "3 1"
        ),
        (
            r"3 3
1 2 1 1
2 3 1 1
3 1 1 1",
            "IMPOSSIBLE"
        ),
        (
            r"3 2
1 2 3 20
2 3 2 20",
            "IMPOSSIBLE"
        ),
        (
            r"1 0",
            "0 1"
        ),
        (
            r"15 105
1 2 1 1000000000000
1 3 1 1000000000000
1 4 1 1000000000000
1 5 1 1000000000000
1 6 1 1000000000000
1 7 1 1000000000000
1 8 1 1000000000000
1 9 1 1000000000000
1 10 1 1000000000000
1 11 1 1000000000000
1 12 1 1000000000000
1 13 1 1000000000000
1 14 1 1000000000000
1 15 1 1000000000000
2 3 1 1000000000000
2 4 1 1000000000000
2 5 1 1000000000000
2 6 1 1000000000000
2 7 1 1000000000000
2 8 1 1000000000000
2 9 1 1000000000000
2 10 1 1000000000000
2 11 1 1000000000000
2 12 1 1000000000000
2 13 1 1000000000000
2 14 1 1000000000000
2 15 1 1000000000000
3 4 1 1000000000000
3 5 1 1000000000000
3 6 1 1000000000000
3 7 1 1000000000000
3 8 1 1000000000000
3 9 1 1000000000000
3 10 1 1000000000000
3 11 1 1000000000000
3 12 1 1000000000000
3 13 1 1000000000000
3 14 1 1000000000000
3 15 1 1000000000000
4 5 1 1000000000000
4 6 1 1000000000000
4 7 1 1000000000000
4 8 1 1000000000000
4 9 1 1000000000000
4 10 1 1000000000000
4 11 1 1000000000000
4 12 1 1000000000000
4 13 1 1000000000000
4 14 1 1000000000000
4 15 1 1000000000000
5 6 1 1000000000000
5 7 1 1000000000000
5 8 1 1000000000000
5 9 1 1000000000000
5 10 1 1000000000000
5 11 1 1000000000000
5 12 1 1000000000000
5 13 1 1000000000000
5 14 1 1000000000000
5 15 1 1000000000000
6 7 1 1000000000000
6 8 1 1000000000000
6 9 1 1000000000000
6 10 1 1000000000000
6 11 1 1000000000000
6 12 1 1000000000000
6 13 1 1000000000000
6 14 1 1000000000000
6 15 1 1000000000000
7 8 1 1000000000000
7 9 1 1000000000000
7 10 1 1000000000000
7 11 1 1000000000000
7 12 1 1000000000000
7 13 1 1000000000000
7 14 1 1000000000000
7 15 1 1000000000000
8 9 1 1000000000000
8 10 1 1000000000000
8 11 1 1000000000000
8 12 1 1000000000000
8 13 1 1000000000000
8 14 1 1000000000000
8 15 1 1000000000000
9 10 1 1000000000000
9 11 1 1000000000000
9 12 1 1000000000000
9 13 1 1000000000000
9 14 1 1000000000000
9 15 1 1000000000000
10 11 1 1000000000000
10 12 1 1000000000000
10 13 1 1000000000000
10 14 1 1000000000000
10 15 1 1000000000000
11 12 1 1000000000000
11 13 1 1000000000000
11 14 1 1000000000000
11 15 1 1000000000000
12 13 1 1000000000000
12 14 1 1000000000000
12 15 1 1000000000000
13 14 1 1000000000000
13 15 1 1000000000000
14 15 1 1000000000000",
            ""
        ),
    ];

    let mut all_ok = true;
    for (i, case) in cases.iter().enumerate() {
        print!("case {} : ", i);

        let expected = case.1;
        let actual = solve(case.0);

        if expected.trim() == actual.trim() {
            println!("OK");
        } else {
            println!("NG");
            println!("    Expected: {}", expected);
            println!("    Actual  : {}", actual);

            all_ok = false;
        }
    }

    assert_eq!(all_ok, true);
}