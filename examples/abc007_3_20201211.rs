#![allow(non_snake_case)]

use std::io::Read;
use std::collections::VecDeque;

fn main() {
    let mut buf = String::new();
    std::io::stdin().read_to_string(&mut buf).unwrap();

    let answer = solve(&buf);

    println!("{}", answer);
}

fn solve(input: &str) -> String {
    let mut iterator = input.split_whitespace();

    let h: usize = iterator.next().unwrap().parse().unwrap();
    let w: usize = iterator.next().unwrap().parse().unwrap();
    let sh: usize = iterator.next().unwrap().parse().unwrap();
    let sw: usize = iterator.next().unwrap().parse().unwrap();
    let gh: usize = iterator.next().unwrap().parse().unwrap();
    let gw: usize = iterator.next().unwrap().parse().unwrap();
    let sh = sh - 1;
    let sw = sw - 1;
    let gh = gh - 1;
    let gw = gw - 1;
    let mut grid = Vec::new();
    for _ in 0..h {
        let line: Vec<char> = iterator.next().unwrap().chars().collect();
        grid.push(line);
    }

    const INF: usize = 1_000_000;
    let dh = vec![1, -1, 0, 0];
    let dw = vec![0, 0, 1, -1];

    let mut dist = vec![vec![INF; w]; h];
    let mut q = VecDeque::new();
    dist[sh][sw] = 0;
    q.push_back((sh, sw));
    while let Some((ch, cw)) = q.pop_front() {
        for i in 0..4 {
            let nh = (ch as isize + dh[i]) as usize;
            let nw = (cw as isize + dw[i]) as usize;
            if grid[nh][nw] == '#' || dist[nh][nw] != INF {
                continue;
            }
            dist[nh][nw] = dist[ch][cw] + 1;
            q.push_back((nh, nw));
        }
    }
    dist[gh][gw].to_string()
}

#[test]
fn test() {
    let cases: Vec<(&str, &str)> = vec![
        (
            r"7 8
2 2
4 5
########
#......#
#.######
#..#...#
#..##..#
##.....#
########",
            "11"
        ),
        (
            r"5 8
2 2
2 4
########
#.#....#
#.###..#
#......#
########",
            "10"
        ),
        (
            r"50 50
2 2
49 49
##################################################
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
#................................................#
##################################################",
            "94"
        ),
    ];

    let mut all_ok = true;
    for (i, case) in cases.iter().enumerate() {
        print!("case {} : ", i);

        let expected = case.1;
        let actual = solve(case.0);

        if expected.trim() == actual.trim() {
            println!("OK");
        } else {
            println!("NG");
            println!("    Expected: {}", expected);
            println!("    Actual  : {}", actual);

            all_ok = false;
        }
    }

    assert_eq!(all_ok, true);
}